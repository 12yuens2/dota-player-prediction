* Week 1 - 18/09/18
First meeting to discuss project. Main idea of the project is to predict who the player is in a game of DOTA based on replay data. 

** Initial plan (technical)
Start with parsing mouse movement from replays using ~clarity~ or the python replay parser to get angles/curves. 
- http://www.ise.bgu.ac.il/faculty/liorr/clint1.pdf

Start with the same player on the same hero using binary classification - is the player playing this hero X or not?

Further game knowledge prediction features later and predict with features both independently and combined

Other ideas:
- Predicting strategies of players

- tracking statistics for pro players
- detect previously banned players
- anonymity in online games leading to antisocial behaviour due to lack of consequences > easily make new accounts to continue behaviour despite bans, especially in free to play games
- smurfing ranked games affecting players at lower skill level
- elo boosting and selling high ranked accounts (hard to detect)
- use case of 'stolen' accounts, where player behaviour suddenly changes to be very different
- 'identity theft' in online amateur tournaments

* Week 2 - 27/09/18
** Before meeting notes
DOER:
- need to add objective about identifying features to extract from replays?

Parser:


** TODO next week
 - [x] Auto replay download with OpenDOTA API
 - [x] Get player entity given steamID
 - [x] Parse player mouse movement data in ML friendly format
 - [] Process mouse movement data for ML based on identification paper
 - [] Run ML on dataset of mouse movement data

** Other notes
- Might need to get ethics approval

This project aims to predict players in the video game Dota 2 by analysing replays of players and running the data through a machine learning model. The purpose is to detect players using accounts for illegitimate reasons such as account selling. Publicly available data from Dota 2 players will be collected from the internet and processed. The research will be done in St Andrews and no interaction between the researcher and the players will take place.

- not interested in personal name, just interested in matching the account ids together
- not possible to obtain consent
- getting data from valve not opendota
- potential for identifiable names, but not interested, so will not store account names only ids
- say more about why, detect whether its the same person behind the account
- how long to keep the data, not going to store user id, analysed data kept indefinitely, anonimysed by removal of handle names

- steam API key = FFF909F2C1F90CFD66D568D188DBF371

* Week 3 - 04/10/18

** TODO week
- [x] Process mouse movement data for ML with categorised features
- [x] Setup ML pipeline
- [] Tune hyper parameters (CTT) with for precision/recall curve
- [x] Setup java jar and script for running full pipeline smoothly
- [] 


* Week 4 - 11/10/18
** TODO week
- [x] Use all mouse events in game rather than as individual data points for ML 
- [x] Use average/voting for mouse events - eg out of 100, how many are positive, if over 50 take as positive
- [x] Make sure to not use evaluation game in training
- [] Find good way to average all the moves in game (average as input or output?)
- [] Which percentage of mouse movements are more indicative (eg at beginning/end of match, during events/casts)
- [] Scripts for allowing easy data gathering when tuning hyper parameters
  - [x] Script getting steamid from opendota
  - [x] Get list of players automatically and download their games given hero id
  - [x] Don't download replays if error from server
  - [] CTT threshold as parameter in java
  - [] Script python classifier to give accuracy/precision/recall results 
- [] Investigate bagging/boosting/stacking as methods to combine classifiers (https://stats.stackexchange.com/questions/18891/bagging-boosting-and-stacking-in-machine-learning)
- [] Investigate combining probabilities as a method to combine the movement classifiers
- [] Investigate correlation of mouse movements features to output and look into reducing dimensionality (eg. PCA) REGULARISATION
- [] Consider attack/move/cast as separate feature sets rather than a single "mouse movement" feature set

Notes: 
- the combination of classifiers will be important not only for the attack/move/cast mouse movements, but also when future features such as hero/item/skill selection is used
- Must also consider adding weights to the different features and how to learn/set the weights to give best results (experimental? or following some paper?)

** Links
- On Combining Classifiers https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=667881
- On Feature Combination for Multiclass Object Classification http://is.tuebingen.mpg.de/fileadmin/user_upload/files/publications/PID953627_5937[0].pdf

- VotingClassifier https://stackoverflow.com/questions/45074579/votingclassifier-different-feature-sets

** Paper on combining classifiers
https://ac.els-cdn.com/S0925231298000198/1-s2.0-S0925231298000198-main.pdf?_tid=8a144b8f-de12-4d06-8b16-3c5ebd8a8979&acdnat=1539689896_665ebbff81591bae8789fb402acf0728


*** Combine feature vectors into a single composite feature vector
Cons:
- Curse of dimensionality due to composition
- Difficulty in composition
- Redundancy (component feature vectors not independent of each other)

*** Combining classifiers
Reasons for combining classifiers
- Allows multiple classifiers to work on different features sets
- Allows the different features set to be used simultaneously

Combining classifiers can be seen as combination of multiple probability distributions - two frameworks to do combination:
1. aggregate classifier distributions into a single distribution to make the final decision
2. linear opinion pools where decision is made from a linear combination of classifier opinions


